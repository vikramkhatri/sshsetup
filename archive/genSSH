#!/bin/bash

echo Sourcing ~/.setenvvars 
source ~/.setenvvars

echo ===================================================
echo Generate ssh keys and exchange them with hosts
echo ===================================================

if [[ -z $PS_TOPOLOGY_HOST ]] ; then
   echo Environment variable PS_TOPOLOGY_HOST is not set. Exiting ...
   exit 1
fi

USERNM=$(whoami)
USERGP=$(id -g -n $USERNM)
USERHM=$(eval echo "~$USERNM")
SSH="/bin/ssh -q -o StrictHostKeyChecking=no"
SCP="/bin/scp -q -o StrictHostKeyChecking=no"

USERPW=$(cat /var/ps/$USERNM | base64 -d)

if [[ "$USERPW" == "" ]]; then
  echo Invalid User specified $USERNM. Exiting...
  exit 1
fi

echo USER NAME  = $USERNM
echo USER GROUP = $USERGP
echo USER HOME  = $USERHM
KNOWN_HOSTS=/tmp/known_hosts.$USERNM
AUTH_KEYS=/tmp/authorized_keys.$USERNM

TGT_KNOWN_HOSTS=known_hosts
TGT_AUTH_KEYS=authorized_keys

echo Build server list
i=0
LINES=$(echo $PS_TOPOLOGY_HOST | sed 's/;/\n/g')
for line in $LINES
do
  VALUES=$(echo $line | sed 's/:/\n/g')
  j=0
  for value in $VALUES
  do
     if [[ $j -eq 0 ]] ; then
       pstype[$i]=$value
     elif [[ $j -eq 1 ]] ; then
       hosts[$i]=$value
     else
       ipaddr[$i]=$value
     fi
     ((j++))
  done
  ((i++))
done

sorted_hosts=($(echo "${hosts[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
sorted_ipaddr=($(echo "${ipaddr[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

> $KNOWN_HOSTS
for ((i = 0; i < ${#sorted_hosts[@]}; ++i));
do
  ssh-keyscan ${sorted_hosts[i]}.$PUBLIC_DOMAIN,\
              ${sorted_hosts[i]},${sorted_ipaddr[i]}
done >> $KNOWN_HOSTS
set -x
echo Generate ssh keys
for ((i = 0; i < ${#sorted_hosts[@]}; ++i));
do
  server=${sorted_hosts[$i]}
  exp $USERPW ${SSH} $server rm -fr ${USERHM}/.ssh
  var=$(printf '/bin/ssh-keygen -b 2048 -t rsa -N "" -f ~/.ssh/id_rsa')
  exp $USERPW ${SSH} $server $var
  exp $USERPW ${SCP} ${USERNM}@$server:${USERHM}/.ssh/id_rsa.pub /tmp/id_rsa.$server.pub
done
set +x
> $AUTH_KEYS
for server in ${sorted_hosts[@]};
do
  cat /tmp/id_rsa.$server.pub >> $AUTH_KEYS
  rm -f /tmp/id_rsa.$server.pub
done

chmod 600 $AUTH_KEYS
for server in ${sorted_hosts[@]};
do
  exp $USERPW ${SCP} $KNOWN_HOSTS ${USERNM}@$server:${USERHM}/.ssh/$TGT_KNOWN_HOSTS
  exp $USERPW ${SCP} $AUTH_KEYS ${USERNM}@$server:${USERHM}/.ssh/$TGT_AUTH_KEYS
done

/bin/rm -f $AUTH_KEYS
/bin/rm -f $KNOWN_HOSTS
